# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vesc_msgs/VescCtrl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VescCtrl(genpy.Message):
  _md5sum = "034ba36ad2a5637b06f87a196fb8b3a2"
  _type = "vesc_msgs/VescCtrl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#commanded VESC duty cycle, current, brake current, speed, motor position, servo position

int64 mode  #control mode 1-brake mode,2-current mode,3-speed mode,4-duty_cycle mode,5-position mode
float64 duty_cycle #vesc control mode
float64 current    #vesc control mode
float64 brake
float64 speed      #vesc control mode
float64 position
float64 servo
"""
  __slots__ = ['mode','duty_cycle','current','brake','speed','position','servo']
  _slot_types = ['int64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,duty_cycle,current,brake,speed,position,servo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VescCtrl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.duty_cycle is None:
        self.duty_cycle = 0.
      if self.current is None:
        self.current = 0.
      if self.brake is None:
        self.brake = 0.
      if self.speed is None:
        self.speed = 0.
      if self.position is None:
        self.position = 0.
      if self.servo is None:
        self.servo = 0.
    else:
      self.mode = 0
      self.duty_cycle = 0.
      self.current = 0.
      self.brake = 0.
      self.speed = 0.
      self.position = 0.
      self.servo = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q6d().pack(_x.mode, _x.duty_cycle, _x.current, _x.brake, _x.speed, _x.position, _x.servo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.mode, _x.duty_cycle, _x.current, _x.brake, _x.speed, _x.position, _x.servo,) = _get_struct_q6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q6d().pack(_x.mode, _x.duty_cycle, _x.current, _x.brake, _x.speed, _x.position, _x.servo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.mode, _x.duty_cycle, _x.current, _x.brake, _x.speed, _x.position, _x.servo,) = _get_struct_q6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q6d = None
def _get_struct_q6d():
    global _struct_q6d
    if _struct_q6d is None:
        _struct_q6d = struct.Struct("<q6d")
    return _struct_q6d
