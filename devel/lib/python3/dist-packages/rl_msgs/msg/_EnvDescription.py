# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rl_msgs/EnvDescription.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EnvDescription(genpy.Message):
  _md5sum = "15ba7d726cacbbdff2204ab5bdfdf816"
  _type = "rl_msgs/EnvDescription"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# describes the environment with a title
# the number of actions
# the number of states
# the range of each state feature
# the range of rewards

string title
int32 action_dims
int32 state_dims
float32[] min_state_range
float32[] max_state_range
float32[] min_action_range
float32[] max_action_range
float32[] reward_range
int32 max_episode_len
"""
  __slots__ = ['title','action_dims','state_dims','min_state_range','max_state_range','min_action_range','max_action_range','reward_range','max_episode_len']
  _slot_types = ['string','int32','int32','float32[]','float32[]','float32[]','float32[]','float32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       title,action_dims,state_dims,min_state_range,max_state_range,min_action_range,max_action_range,reward_range,max_episode_len

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EnvDescription, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.title is None:
        self.title = ''
      if self.action_dims is None:
        self.action_dims = 0
      if self.state_dims is None:
        self.state_dims = 0
      if self.min_state_range is None:
        self.min_state_range = []
      if self.max_state_range is None:
        self.max_state_range = []
      if self.min_action_range is None:
        self.min_action_range = []
      if self.max_action_range is None:
        self.max_action_range = []
      if self.reward_range is None:
        self.reward_range = []
      if self.max_episode_len is None:
        self.max_episode_len = 0
    else:
      self.title = ''
      self.action_dims = 0
      self.state_dims = 0
      self.min_state_range = []
      self.max_state_range = []
      self.min_action_range = []
      self.max_action_range = []
      self.reward_range = []
      self.max_episode_len = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.action_dims, _x.state_dims))
      length = len(self.min_state_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.min_state_range))
      length = len(self.max_state_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.max_state_range))
      length = len(self.min_action_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.min_action_range))
      length = len(self.max_action_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.max_action_range))
      length = len(self.reward_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.reward_range))
      _x = self.max_episode_len
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_dims, _x.state_dims,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_state_range = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_state_range = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_action_range = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_action_range = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reward_range = s.unpack(str[start:end])
      start = end
      end += 4
      (self.max_episode_len,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.action_dims, _x.state_dims))
      length = len(self.min_state_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.min_state_range.tostring())
      length = len(self.max_state_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.max_state_range.tostring())
      length = len(self.min_action_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.min_action_range.tostring())
      length = len(self.max_action_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.max_action_range.tostring())
      length = len(self.reward_range)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.reward_range.tostring())
      _x = self.max_episode_len
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_dims, _x.state_dims,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_state_range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_state_range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_action_range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_action_range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reward_range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.max_episode_len,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
