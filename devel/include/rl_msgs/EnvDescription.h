// Generated by gencpp from file rl_msgs/EnvDescription.msg
// DO NOT EDIT!


#ifndef RL_MSGS_MESSAGE_ENVDESCRIPTION_H
#define RL_MSGS_MESSAGE_ENVDESCRIPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rl_msgs
{
template <class ContainerAllocator>
struct EnvDescription_
{
  typedef EnvDescription_<ContainerAllocator> Type;

  EnvDescription_()
    : title()
    , action_dims(0)
    , state_dims(0)
    , min_state_range()
    , max_state_range()
    , min_action_range()
    , max_action_range()
    , reward_range()
    , max_episode_len(0)  {
    }
  EnvDescription_(const ContainerAllocator& _alloc)
    : title(_alloc)
    , action_dims(0)
    , state_dims(0)
    , min_state_range(_alloc)
    , max_state_range(_alloc)
    , min_action_range(_alloc)
    , max_action_range(_alloc)
    , reward_range(_alloc)
    , max_episode_len(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title_type;
  _title_type title;

   typedef int32_t _action_dims_type;
  _action_dims_type action_dims;

   typedef int32_t _state_dims_type;
  _state_dims_type state_dims;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _min_state_range_type;
  _min_state_range_type min_state_range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _max_state_range_type;
  _max_state_range_type max_state_range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _min_action_range_type;
  _min_action_range_type min_action_range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _max_action_range_type;
  _max_action_range_type max_action_range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _reward_range_type;
  _reward_range_type reward_range;

   typedef int32_t _max_episode_len_type;
  _max_episode_len_type max_episode_len;





  typedef boost::shared_ptr< ::rl_msgs::EnvDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_msgs::EnvDescription_<ContainerAllocator> const> ConstPtr;

}; // struct EnvDescription_

typedef ::rl_msgs::EnvDescription_<std::allocator<void> > EnvDescription;

typedef boost::shared_ptr< ::rl_msgs::EnvDescription > EnvDescriptionPtr;
typedef boost::shared_ptr< ::rl_msgs::EnvDescription const> EnvDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rl_msgs::EnvDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rl_msgs::EnvDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rl_msgs::EnvDescription_<ContainerAllocator1> & lhs, const ::rl_msgs::EnvDescription_<ContainerAllocator2> & rhs)
{
  return lhs.title == rhs.title &&
    lhs.action_dims == rhs.action_dims &&
    lhs.state_dims == rhs.state_dims &&
    lhs.min_state_range == rhs.min_state_range &&
    lhs.max_state_range == rhs.max_state_range &&
    lhs.min_action_range == rhs.min_action_range &&
    lhs.max_action_range == rhs.max_action_range &&
    lhs.reward_range == rhs.reward_range &&
    lhs.max_episode_len == rhs.max_episode_len;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rl_msgs::EnvDescription_<ContainerAllocator1> & lhs, const ::rl_msgs::EnvDescription_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rl_msgs::EnvDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rl_msgs::EnvDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rl_msgs::EnvDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rl_msgs::EnvDescription_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_msgs::EnvDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_msgs::EnvDescription_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rl_msgs::EnvDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15ba7d726cacbbdff2204ab5bdfdf816";
  }

  static const char* value(const ::rl_msgs::EnvDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15ba7d726cacbbdfULL;
  static const uint64_t static_value2 = 0xf2204ab5bdfdf816ULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_msgs::EnvDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rl_msgs/EnvDescription";
  }

  static const char* value(const ::rl_msgs::EnvDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rl_msgs::EnvDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# describes the environment with a title\n"
"# the number of actions\n"
"# the number of states\n"
"# the range of each state feature\n"
"# the range of rewards\n"
"\n"
"string title\n"
"int32 action_dims\n"
"int32 state_dims\n"
"float32[] min_state_range\n"
"float32[] max_state_range\n"
"float32[] min_action_range\n"
"float32[] max_action_range\n"
"float32[] reward_range\n"
"int32 max_episode_len\n"
;
  }

  static const char* value(const ::rl_msgs::EnvDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rl_msgs::EnvDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.title);
      stream.next(m.action_dims);
      stream.next(m.state_dims);
      stream.next(m.min_state_range);
      stream.next(m.max_state_range);
      stream.next(m.min_action_range);
      stream.next(m.max_action_range);
      stream.next(m.reward_range);
      stream.next(m.max_episode_len);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnvDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_msgs::EnvDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rl_msgs::EnvDescription_<ContainerAllocator>& v)
  {
    s << indent << "title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title);
    s << indent << "action_dims: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_dims);
    s << indent << "state_dims: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state_dims);
    s << indent << "min_state_range[]" << std::endl;
    for (size_t i = 0; i < v.min_state_range.size(); ++i)
    {
      s << indent << "  min_state_range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.min_state_range[i]);
    }
    s << indent << "max_state_range[]" << std::endl;
    for (size_t i = 0; i < v.max_state_range.size(); ++i)
    {
      s << indent << "  max_state_range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max_state_range[i]);
    }
    s << indent << "min_action_range[]" << std::endl;
    for (size_t i = 0; i < v.min_action_range.size(); ++i)
    {
      s << indent << "  min_action_range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.min_action_range[i]);
    }
    s << indent << "max_action_range[]" << std::endl;
    for (size_t i = 0; i < v.max_action_range.size(); ++i)
    {
      s << indent << "  max_action_range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max_action_range[i]);
    }
    s << indent << "reward_range[]" << std::endl;
    for (size_t i = 0; i < v.reward_range.size(); ++i)
    {
      s << indent << "  reward_range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.reward_range[i]);
    }
    s << indent << "max_episode_len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_episode_len);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RL_MSGS_MESSAGE_ENVDESCRIPTION_H
